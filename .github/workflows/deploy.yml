name: Deploy BPF System

on:
  workflow_run:
    workflows: ["Terraform AWS Deploy"]
    types:
      - completed
  push:
    branches:
      - main
    paths:
      - '*.py'
      - 'model.pkl'
  workflow_dispatch:

jobs:
  deploy:
    if: github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    permissions:
      actions: read   
      contents: read

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Get Latest Valid Run ID
      id: get_run_id
      run: |
        run_id=$(gh run list \
          --workflow="Terraform AWS Deploy" \
          --json name,conclusion,databaseId \
          --jq '[.[] | select(.conclusion == "success")] | .[0].databaseId')
    
        echo "LATEST_RUN_ID=$run_id" >> $GITHUB_ENV
        echo "::notice::Found Terraform AWS Deploy run ID: $run_id"
    
        if [ -z "$run_id" ]; then
          echo "::error::No valid run_id found!"
          exit 1
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Download Artifact via API
      run: |
        curl -L \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/actions/artifacts \
          | jq '.artifacts[] | select(.name == "terraform-state") | .archive_download_url' \
          | xargs -I{} curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -o terraform.zip {}
    
        unzip terraform.zip -d terraform/

      
    - name: Decode PEM Key
      run: |
        echo "${{ secrets.AWS_PEM_BASE64 }}" | base64 -d > key.pem
        chmod 400 key.pem
        
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.5
        
    - name: Terraform Init
      run: terraform init
      working-directory: terraform    
      
    - name: Get Terraform Output (EC2 IP)
      id: get_ip
      run: |
        echo "EC2_IP=$(terraform output -raw public_ip)" >> $GITHUB_ENV
        echo "🌐 Grafana 주소: http://$(terraform output -raw public_ip):3000"
      working-directory: terraform
      
    - name: Fix Windows line endings in setup.sh
      run: |
        sed -i 's/\r$//' scripts/setup.sh
        
    - name: Upload setup.sh to EC2
      run: |
        scp -o StrictHostKeyChecking=no -i key.pem scripts/setup.sh ubuntu@$EC2_IP:~

    - name: Run setup.sh on EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@$EC2_IP << 'EOF'
          chmod +x setup.sh
          ./setup.sh
        EOF
